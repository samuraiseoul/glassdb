{"version":3,"file":"CustomElement.js","sourceRoot":"","sources":["CustomElement.ts"],"names":[],"mappings":";;AAAA,SAAS,WAAW,CAAC,SAAkB;IACnC,OAAO,SAAS;SACX,OAAO,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,EAAE,GAAG,OAAO,GAAG,GAAG,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;SAC7E,KAAK,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,MAA8B,aAAc,SAAQ,WAAW;IAWpD,iBAAiB;QACpB,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAG,IAAI,CAAC,iBAAiB,EAAE;YAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAAE;IAC5D,CAAC;IAEO,WAAW;QACf,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QACpD,QAAQ,CAAC,SAAS,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QACtD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAEO,MAAM;QACV,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,EAAC,IAAI,EAAG,MAAM,EAAC,CAAC,CAAC;QACtD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,cAAc,EAAE,CAAC;IAC1B,CAAC;IAEO,aAAa;QACjB,IAAG,IAAI,CAAC,SAAS,EAAE;YAAE,IAAI,CAAC,SAAS,EAAE,CAAC;SAAE;IAC5C,CAAC;IAEO,cAAc;QAClB,IAAG,IAAI,CAAC,UAAU,EAAE;YAAE,IAAI,CAAC,UAAU,EAAE,CAAC;SAAE;IAC9C,CAAC;IAES,cAAc,CAA2B,QAAiB;QAChE,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5E,CAAC;IAES,iBAAiB,CAA2B,QAAiB;QACnE,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3F,CAAC;IAEM,MAAM,KAAK,YAAY,KAAc,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CAC/E;AA9CD,gCA8CC","sourcesContent":["function toSnakeCase(camelCase : string) : string {\n    return camelCase //replace caps with their lowercase version and add a dash in front\n        .replace(/[A-Z]/g, (firstMatch) => { return '-' + firstMatch.toLowerCase(); })\n        .slice(1); //remove the added dash from the first character being uppercase\n}\n\nexport default abstract class CustomElement extends HTMLElement {\n    protected abstract readonly TEMPLATE : string;\n\n    protected abstract readonly STYLE : string;\n\n    protected registerListeners?() : void;\n\n    protected preRender?() : void;\n\n    protected postRender?() : void;\n\n    public connectedCallback() {\n        this.render();\n        if(this.registerListeners) { this.registerListeners(); }\n    }\n\n    private getTemplate() : HTMLTemplateElement {\n        const template = document.createElement('template');\n        template.innerHTML = `${this.STYLE} ${this.TEMPLATE}`;\n        return template;\n    }\n\n    private render() : void {\n        this.preRenderHook();\n        const shadowRoot = this.attachShadow({mode : \"open\"});\n        shadowRoot.appendChild(this.getTemplate().content.cloneNode(true));\n        this.postRenderHook();\n    }\n\n    private preRenderHook() : void {\n        if(this.preRender) { this.preRender(); }\n    }\n\n    private postRenderHook() : void {\n        if(this.postRender) { this.postRender(); }\n    }\n\n    protected shadowSelector<Type extends HTMLElement>(selector : string) : Type | null {\n        return this.shadowRoot ? this.shadowRoot.querySelector(selector) : null;\n    }\n\n    protected shadowSelectorAll<Type extends HTMLElement>(selector : string) : Type[] | null {\n        return this.shadowRoot ? Array.from(this.shadowRoot.querySelectorAll(selector)) : null;\n    }\n\n    public static get ELEMENT_NAME() : string { return toSnakeCase(this.name); }\n}\n"]}